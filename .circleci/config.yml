version: 2.1

aliases:
  - &clojure_image
    - image: cimg/clojure:1.11.1-node

  - &restore_clojure_cache
    restore_cache:
      name: Restore clojure cache
      keys:
        - v1-dependencies-{{ checksum "deps.edn" }}-{{ checksum "bb.edn" }}
        - v1-dependencies-

  - &save_clojure_cache
    save_cache:
      name: Save clojure cache
      paths:
        - ~/.m2
        - ~/.gitlibs
      key: v1-dependencies-{{ checksum "deps.edn" }}-{{ checksum "bb.edn" }}

  - &restore_npm_cache
    restore_cache:
      name: Save npm cache
      keys:
        - v1-npm-dependencies-{{ checksum "package-lock.json" }}

  - &save_npm_cache
    save_cache:
      name: Restore npm cache
      paths:
        - ./node_modules
      key: v1-npm-dependencies-{{ checksum "package-lock.json" }}

  # The circle image does have a recent version of Clojure but we'd rather use the current one
  - &clojure_install
    run:
      name: Install Clojure
      command: |
        curl -L -O https://github.com/clojure/brew-install/releases/latest/download/linux-install.sh
        chmod +x linux-install.sh
        sudo ./linux-install.sh

   # The circle image does have a recent version of babashka, but we'd rather use the latest
  - &bb_install
    run:
      name: Install bb
      command: |
        sudo bash < <(curl -s https://raw.githubusercontent.com/babashka/babashka/master/install)

  - &npm_deps_install
    run:
      name: Install JavaScript Depedencies
      command: npm ci

  - &clojure_deps_download
    run:
      name: Bring Down Clojure deps
      command: clojure -P -X:cli:test

jobs:
  #
  # build: back-end-checks
  #
  back-end-checks:
    docker: *clojure_image

    steps:
      - checkout
      - *restore_clojure_cache
      - run:
          name: Validate our own cljdoc.edn
          command: curl -fsSL https://raw.githubusercontent.com/cljdoc/cljdoc/master/script/verify-cljdoc-edn | bash -s doc/cljdoc.edn
      - *clojure_install
      - *bb_install

      - run:
          name: Report Tools Versions
          command: |
            java --version
            clojure --version
            bb --version

      - *clojure_deps_download

      - run:
          name: Lint with clj-kondo
          command: bb lint

      - run:
          name: Lint with eastwood
          command: bb eastwood

      - run:
          name: Code Style Check
          command: bb code-format check

      - *save_clojure_cache

  #
  # build: front-end-checks
  #
  front-end-checks:
    docker: *clojure_image

    steps:
      - checkout

      - *restore_npm_cache
      - *bb_install
      - *npm_deps_install

      - run:
          name: Report Tools Versions
          command: |
            node --version
            npx tsc --version
            bb --version

      - run:
          name: Lint Front End Source Format
          command: bb code-format-js

      - run:
          name: Compile TypeScript to Check for Issues
          command: bb lint-js

      - *save_npm_cache

  #
  # build: test
  #
  test:
    docker: *clojure_image

    steps:
      - checkout
      - *restore_clojure_cache
      - *restore_npm_cache
      - *clojure_install
      - *bb_install

      - run:
          name: Report Tools Versions
          command: |
           node --version
           java --version
           clojure --version
           bb --version

      - *npm_deps_install

      - run:
          name: Build Front End
          command: bb compile-js

      - *clojure_deps_download

      - run:
          name: Build Docs for Sample Library
          command: bb ingest --project bidi --version 2.1.3

      - run:
          name: Run Tests
          command: bb test

      - *save_clojure_cache
      - *save_npm_cache

  #
  # build: package, output used by:
  # - publish-zip-build
  # - publish-docker
  #
  package:
    docker: *clojure_image

    steps:
      - checkout
      - *restore_npm_cache
      - *bb_install
      - *npm_deps_install

      - run:
          name: Report Tools Versions
          command: |
            java --version
            bb --version
            node --version

      - run:
          name: Package cljdoc
          command: bb package

      # for publish-zip-build job
      - persist_to_workspace:
          root: .
          paths:
            - target

      - *save_npm_cache
  #
  # build - used later in workflow to group all build jobs
  #
  build:
    docker:
      - image: alpine
    steps:
      - run: echo build done

  #
  # deploy: publish-zip-build
  # (relies on output saved by package)
  #
  publish-zip-build:
    docker:
      - image: cimg/python:3.10
    steps:
      # from package job
      - attach_workspace:
          at: workspace
      - run: ls workspace

      - run:
          name: Install awscli
          command: pip3 install awscli

      - run:
          name: Tools Versions
          command: |
            pip3 --version
            aws --version

      - run:
          name: Set AWS env vars
          # vars are coming from terraform setup
          command: |
            echo 'export AWS_ACCESS_KEY_ID=$RELEASES_BUCKET_ACCESS_KEY' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=$RELEASES_BUCKET_SECRET_KEY' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Deploy to S3
          command: aws s3 sync workspace/target s3://$RELEASES_BUCKET_NAME/build-$CIRCLE_SHA1/ --delete

  #
  # deploy: make and image and publish to docker
  # (relies on output saved by package)
  #
  publish-docker:
    machine:
      image: ubuntu-2204:2023.07.2
    steps:
      - checkout
      # from package job
      - attach_workspace:
          at: .

      - *bb_install

      - run:
          name: Tools Versions
          command: |
            java --version
            bb --version
            docker --version

      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      # because target/ has been put into place `make image` can be
      # run without running ./script/package (which would require npm)
      - run: bb docker-image
      - run: docker push --all-tags cljdoc/cljdoc

  # This assumes that an SSH key has been added to the CircleCI build
  # and it's public key has been copied to ~/.ssh/authorized_keys on
  # the production machine:
  # cat ~/.ssh/cljdoc_deploy.pub | ssh root@cljdoc.org 'cat >> .ssh/authorized_keys'
  deploy-to-nomad:
    docker: *clojure_image

    steps:
      - add_ssh_keys:
          fingerprints:
            - "75:fb:98:1f:f6:21:7f:bf:cc:c9:0e:b2:9e:be:5c:e8"
      - checkout

      - *clojure_install
      - *bb_install

      - run:
          name: Tools Versions
          command: |
            java --version
            clojure --version
            bb --version

      - run: |
          CLJDOC_VERSION=$(bb current-version)
          cd modules/deploy
          clojure -M -m cljdoc.deploy deploy -t ${CLJDOC_VERSION} --nomad-ip $NOMAD_IP -k ~/.ssh/id_rsa_75fb981ff6217fbfccc90eb29ebe5ce8

workflows:
  build-and-deploy:
    jobs:
      - front-end-checks
      - back-end-checks
      - test
      - package
      - build:
          requires:
            - front-end-checks
            - back-end-checks
            - test
            - package
      - publish-docker:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - publish-zip-build:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - deploy-to-nomad:
          requires:
            - build
            - publish-docker
          filters:
            branches:
              only:
                - master
